# -*- coding: utf-8 -*-
"""EX_AI_AS2_2374.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/navaneethkomuravelli/explainable_Ai_2374/blob/main/EX_AI_AS2_2374.ipynb
"""

import pandas as pd

data = pd.read_csv('/content/breastCancer.csv')
data.head()

df = pd.DataFrame(data)
df.head()

#Check how many rows and columns are there and how many nan values
df.info()

X = df.drop(['Unnamed: 32', 'diagnosis'], axis=1)
y = df['diagnosis']

X.head()

y.head()

#Importing the necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score

#Splitting the data.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Scaling the data with Standardization
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#Splitting the data.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Scaling the data with Standardization
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#Train a Logistic Regression model
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# Evaluate the model
y_pred = model.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label='M')
recall = recall_score(y_test, y_pred, pos_label='M')
f1 = f1_score(y_test, y_pred, pos_label='M')
conf_matrix = confusion_matrix(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-score: {f1}")
print(f"Confusion Matrix:\n{conf_matrix}")

# Commented out IPython magic to ensure Python compatibility.
# %pip install shap

import shap

# Select an appropriate SHAP explainer
# For linear models like Logistic Regression, LinearExplainer is suitable
explainer = shap.LinearExplainer(model, X_train_scaled)

# Compute SHAP values for the test set
shap_values = explainer.shap_values(X_test_scaled)

#Giving explaination to Logistic Regression model
explainer = shap.LinearExplainer(model, X_train_scaled)
shap_values = explainer.shap_values(X_test_scaled)

print(shap_values)

# Generate a summary plot
shap.summary_plot(shap_values, X_test_scaled)